<?php
/**
 * Created by PhpStorm.
 * User: scott.henscheid
 * Date: 8/17/2016
 * Time: 3:42 PM
 */

namespace Staple\Query;

use \PDO;

class MockConnection extends Connection
{
	public function __construct($dsn = NULL, $username = NULL, $password = NULL, array $options = NULL)
	{
		if(!isset($this->driver) && isset($dsn)) $this->setDriver(self::getDriverFromDsn($dsn));

		if(isset($username))
			$this->setUsername($username);
		if(isset($password))
			$this->setPassword($password);

		//Set the options property
		$this->setOptions($options);
	}

	/**
	 * @param string $statement
	 * @return MockStatement | boolean
	 */
	public function exec($statement)
	{
		$this->addQueryToLog($statement);

		//return MockStatement
		$stmt = new MockStatement();
		$stmt->setDriver($this->getDriver());

		//Return the result
		return $stmt;
	}

	/**
	 * @param string $statement
	 * @return MockStatement
	 */
	public function query($statement)
	{
		//Log the query
		$this->addQueryToLog($statement);

		//return MockStatement
		$stmt = new MockStatement();
		$stmt->setDriver($this->getDriver());

		//Return the result
		return $stmt;
	}

	/**
	 * (PHP 5 &gt;= 5.1.0, PECL pdo &gt;= 0.1.0)<br/>
	 * Prepares a statement for execution and returns a statement object
	 *
	 * @link http://php.net/manual/en/pdo.prepare.php
	 * @param string $statement <p>
	 * This must be a valid SQL statement for the target database server.
	 * </p>
	 * @param array $driver_options [optional] <p>
	 * This array holds one or more key=&gt;value pairs to set
	 * attribute values for the <b>PDOStatement</b> object that this method
	 * returns. You would most commonly use this to set the
	 * <b>PDO::ATTR_CURSOR</b> value to
	 * <b>PDO::CURSOR_SCROLL</b> to request a scrollable cursor.
	 * Some drivers have driver specific options that may be set at
	 * prepare-time.
	 * </p>
	 * @return MockStatement If the database server successfully prepares the statement,
	 * <b>PDO::prepare</b> returns a
	 * <b>PDOStatement</b> object.
	 * If the database server cannot successfully prepare the statement,
	 * <b>PDO::prepare</b> returns <b>FALSE</b> or emits
	 * <b>PDOException</b> (depending on error handling).
	 * </p>
	 * <p>
	 * Emulated prepared statements does not communicate with the database server
	 * so <b>PDO::prepare</b> does not check the statement.
	 */
	public function prepare($statement, array $driver_options = array())
	{
		parent::prepare($statement, $driver_options); // TODO: Change the autogenerated stub
	}

	/**
	 * (PHP 5 &gt;= 5.1.0, PECL pdo &gt;= 0.1.0)<br/>
	 * Returns the ID of the last inserted row or sequence value
	 *
	 * @link http://php.net/manual/en/pdo.lastinsertid.php
	 * @param string $name [optional] <p>
	 * Name of the sequence object from which the ID should be returned.
	 * </p>
	 * @return string If a sequence name was not specified for the <i>name</i>
	 * parameter, <b>PDO::lastInsertId</b> returns a
	 * string representing the row ID of the last row that was inserted into
	 * the database.
	 * </p>
	 * <p>
	 * If a sequence name was specified for the <i>name</i>
	 * parameter, <b>PDO::lastInsertId</b> returns a
	 * string representing the last value retrieved from the specified sequence
	 * object.
	 * </p>
	 * <p>
	 * If the PDO driver does not support this capability,
	 * <b>PDO::lastInsertId</b> triggers an
	 * IM001 SQLSTATE.
	 */
	public function lastInsertId($name = null)
	{
		parent::lastInsertId($name); // TODO: Change the autogenerated stub
	}
}